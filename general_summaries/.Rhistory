aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>1.5e4,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>1e4,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv')
head(td)
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=4)
head(td)
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=8)
head(td)
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=11)
head(td)
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=12)
head(td)
td=td[grepl('Tridac', td$sample_title),]
head(td)
tdl <- td %>%
mutate(
latitude = str_replace(latitude, "[NSEW]", ""),
longitude = str_replace(longitude, "[NSEW]", "")
)
library(stringr)
tdl <- td %>%
mutate(
latitude = str_replace(latitude, "[NSEW]", ""),
longitude = str_replace(longitude, "[NSEW]", "")
)
data <- td %>%
mutate(
latitude = str_trim(str_extract(lat_long, "^[^,]+")),
longitude = str_trim(str_extract(lat_long, "(?<=, ).*"))
)
colnames(td)
data <- td %>%
mutate(
latitude = str_trim(str_extract(lat_long, "^[^,]+")),
longitude = str_trim(str_extract(lat_long, "(?<=, ).*"))
)
data <- td %>%
dplyr::mutate(
latitude = str_trim(str_extract(lat_long, "^[^,]+")),
longitude = str_trim(str_extract(lat_long, "(?<=, ).*"))
)
class(td)
library(stringr)
data <- td %>%
dplyr::mutate(
latitude = str_trim(str_extract(lat_long, "^[^,]+")),
longitude = str_trim(str_extract(lat_long, "(?<=, ).*"))
)
td$latitude=str_trim(str_extract(td$lat_long, "^[^,]+"))
head(str_extract(td$lat_long, "^[^,]+"))
td$coordinates=td$lat_long
data <- td %>%
mutate(
latitude_longitude = str_split(coordinates, ", "),
latitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[1], "[NSEW]", ""))),
longitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[2], "[NSEW]", "")))
) %>%
select(-latitude_longitude)
data <- td %>%
mutate(
latitude_longitude = str_split(lat_long, ", "),
latitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[1], "[NSEW]", ""))),
longitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[2], "[NSEW]", "")))
) %>%
select(-latitude_longitude)
rlang::last_trace()
data <- td %>%
mutate(
latitude_longitude = str_split(td$lat_long, ", "),
latitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[1], "[NSEW]", ""))),
longitude = sapply(latitude_longitude, function(x) str_trim(str_replace(x[2], "[NSEW]", "")))
) %>%
select(-latitude_longitude)
td$lat=str_split_fixed(td$lat_lon, 'N, ',2)[,1]
head(td$lat)
td$lat=str_split_fixed(td$lat_lon, 'N,',2)[,1]
head(td$lat)
td$lat=as.numeric(str_split_fixed(td$lat_lon, 'N,',2)[,1])
td$long=as.numeric(gsub('W', '', str_split_fixed(td$lat_lon, 'N,\\s*|N,',2)[,2]))
head(td)
library(maps)
map_data=map_data('world')
ggplot() +
geom_polygon(data = td, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = td, aes(x = longitude, y = latitude), color = "red", size = 3) +
coord_fixed(1.3) +
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = td, aes(x = longitude, y = latitude), color = "red", size = 3) +
coord_fixed(1.3) +
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = td, aes(x = long, y = lat), color = "red", size = 3) +
coord_fixed(1.3) +
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
summary(td$long)
hist(td$long)
td$long[td$long>0]=td$long[td$long>0]*-1
td$long[td$long>0]=td$long[td$long>0]*-1
head(td$long>0)
sum(td$long>0)
td$long[td$long>0 & !is.na(td$long)]=td$long[td$long>0 & !is.na(td$long)]*-1
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = td, aes(x = long, y = lat), color = "red", size = 3) +
coord_fixed(1.3) +
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_point(data = td, aes(x = long, y = lat), color = "red", size = 3) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = td, aes(x = long, y = lat), color = "red", size = 3, alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
head(td)
td %>% group_by(lat_lon, lat, long) %>% dplyr::summarize(samples=n())
td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long) %>% dplyr::summarize(samples=n())
td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long) %>% dplyr::summarize(samples=dplyr::n())
tdsize=td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long) %>% dplyr::summarize(samples=dplyr::n())
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat), color = "red", aes(size = samples), alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples), color = "red", alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=12)
td$lat=as.numeric(str_split_fixed(td$lat_lon, 'N,',2)[,1])
td$long=as.numeric(gsub('W', '', str_split_fixed(td$lat_lon, 'N,\\s*|N,',2)[,2]))
map_data=map_data('world')
td$long[td$long>0 & !is.na(td$long)]=td$long[td$long>0 & !is.na(td$long)]*-1
tdsize=td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long) %>% dplyr::summarize(samples=dplyr::n())
## plot pop panel locations with size
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples), color = "red", alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
head(td)
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude")
tdsize=td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long, X.organism) %>% dplyr::summarize(samples=dplyr::n())
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude")
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(label.position='NULL')
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(label.position='NA')
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(legend.position='NULL')
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(legend.position='NULL')
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(legend.position='NULL')
td$long=as.numeric(gsub('W', '', str_split_fixed(td$lat_lon, 'N,\\s*|N,',2)[,2]))
tdsize=td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long, X.organism) %>% dplyr::summarize(samples=dplyr::n())
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3)+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(legend.position='NULL')
## all species
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples, color = X.organism), alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))+
labs(title = " Population Panels", x = "Longitude", y = "Latitude") + theme(legend.position='NULL')
td=read.csv('~/Downloads/PanAnd_SampleTracker - Short_Reads.csv', skip=12)
td=td[grepl('Tridac', td$sample_title),]
td$lat=as.numeric(str_split_fixed(td$lat_lon, 'N,',2)[,1])
td$long=as.numeric(gsub('W', '', str_split_fixed(td$lat_lon, 'N,\\s*|N,',2)[,2]))
map_data=map_data('world')
td$long[td$long>0 & !is.na(td$long)]=td$long[td$long>0 & !is.na(td$long)]*-1
tdsize=td %>% filter(!is.na(lat)) %>% group_by(lat_lon, lat, long, X.organism) %>% dplyr::summarize(samples=dplyr::n())
## plot pop panel locations with size
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples), color = "red", alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))
## plot pop panel locations with size
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_jitter(data = tdsize, aes(x = long, y = lat, size=samples), color = "red", alpha=0.5) +
coord_fixed(1.3, xlim = c(-130, -60), ylim = c(20, 55))+
labs(title = "Tripsacum Population Panel", x = "Longitude", y = "Latitude")
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%'chr14, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%'chr14', ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%'chr4' & data$queryChr%in%'chr14', ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%'chr4' & data$queryChr%in%'chr14', ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3 & tandems$refChr=='chr4',], aes(xintercept = start/1e6, color=Classification))
process_anchors_to_dotplot('../syntenic_anchors/anchors/agerar-Pv-6', minBlock=20, refChrs='Chr01')
process_anchors_to_dotplot('../syntenic_anchors/anchors/udigit-Pv-6', minBlock=20, refChrs='Chr01')
process_anchors_to_dotplot <- function(filepath, color_palette=muted_colors, minBlock=10, title='', refChrs=c(paste0('Chr0', 1:9), 'Chr10'), queryChrs='') {
# Load data
data <- read.table(filepath, header = TRUE)
data <- data[data$gene != 'interanchor', ]
## get queryChrs if they aren't supplied
if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
}
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
# Create the plot
ggplot(data[ data$refChr %in% names(color_palette) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
scale_color_manual(values = color_palette) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') +
ggtitle(title)
}
process_anchors_to_dotplot('../syntenic_anchors/anchors/udigit-Pv-6', minBlock=20, refChrs='Chr01')
process_anchors_to_dotplot('../syntenic_anchors/anchors/udigit-Pv-6', minBlock=20, queryChrs=c('scaf_32', 'scaf_18', 'scaf_19'))
process_anchors_to_dotplot('../syntenic_anchors/anchors/udigit-Pv-6', minBlock=20, refChrs='Chr05')
a=read.table('../subgenomes/udigitk17_q50_f2.0.ltr.insert.data', header=T)
ggplot(a, aes(x=age, group=sg, color=sg)) + geom_density()
a=read.table('../subgenomes/udigitk17_q50_f2.ltr.insert.data', header=T)
ggplot(a, aes(x=age, group=sg, color=sg)) + geom_density()
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'identity', alpha=0.3) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'dodge') + facet_wrap(~sg, ncol=1)
ggplot(ks[ks$genome=='agerjg',], aes(x=mya))+ geom_histogram(binwidth=0.1)
ggplot(ks[ks$genome=='udigit',], aes(x=mya))+ geom_histogram(binwidth=0.1)
sg=read.table('../subgenomes/udigitk17_q50_f2.chrom-subgenome.tsv', header=F)
a$scaf=str_split_fixed(a$ltr, ':', 2)[,1]
a$scafsg=sg$V2[match(a$scaf, sg$V1)]
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'dodge') + facet_wrap(~paste(sg, scafsg), ncol=1, scales='free_y')  + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
### filter heavier to get only SG==SG
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'identity', alpha=0.3) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, data=ks[ks$genome=='agerjg',][sample(1:sum(ks$genome=='agerjg', na.rm=T), 30000),], aes(x=mya), color='black', fill='black', group='gene') +
geom_histogram(binwidth=0.1, position = 'identity', alpha=0.5) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.05, data=ks[ks$genome=='agerjg',][sample(1:sum(ks$genome=='agerjg', na.rm=T), 30000),], aes(x=mya), color='black', fill='black', group='gene') +
geom_histogram(binwidth=0.05, position = 'identity', alpha=0.5) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange')) + xlim(0,10)
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg)) + geom_density(data=ks[ks$genome=='agerjg',], aes(x=mya), color=NA, fill='darkgray', group='gene', lwd=3, alpha=0.4) +
geom_density(lwd=3, alpha=0.3) + scale_color_manual(values=c('darkgreen', 'red', 'blue', 'orange'), labels=c('Non-specific', 'Subgenome A', 'Subgenome B', 'Subgenome C'), name='SG-Specific TE')+ scale_fill_manual(values=c('darkgreen', 'red', 'blue', 'orange')) + xlim(0,10) + xlab('Mya')
head(a)
head(sg)
process_anchors_to_dotplot('../syntenic_anchors/anchors/udigit-Pv-6', minBlock=20, queryChrs=c('scaf_32', 'scaf_18', 'scaf_19'))
sg[sg$V1%in%c('scaf_32', 'scaf_18', 'scaf_19'),]
library(stringr)
a=read.table('../subgenomes/agerjgk17_q50_f2.0.ltr.insert.data', header=T)
a=read.table('~/Documents/GitHub/panand_assemblies/subgenomes/agerjgk17_q50_f2.0.ltr.insert.data', header=T)
getwd()
a=read.table('~/Documents/GitHub/panand_assemblies/subgenomes/agerjgk17_q40_f2.0.ltr.insert.data', header=T)
ggplot(a, aes(x=age, group=sg, color=sg)) + geom_density()
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'identity', alpha=0.3) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'dodge') + facet_wrap(~sg, ncol=1)
ggplot(ks[ks$genome=='agerjg',], aes(x=mya))+ geom_histogram(binwidth=0.1)
sg=read.table('../subgenomes/agerjgk17_q50_f2.chrom-subgenome.tsv', header=F)
ggplot(a, aes(x=age, group=sg, color=sg)) + geom_density()
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'identity', alpha=0.3) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'dodge') + facet_wrap(~sg, ncol=1)
ggplot(ks[ks$genome=='agerjg',], aes(x=mya))+ geom_histogram(binwidth=0.1)
sg=read.table('~/Documents/GitHub/panand_assemblies/subgenomes/agerjgk17_q50_f2.chrom-subgenome.tsv', header=F)
a$scaf=str_split_fixed(a$ltr, ':', 2)[,1]
a$scafsg=sg$V2[match(a$scaf, sg$V1)]
ggplot(a, aes(x=age, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'dodge') + facet_wrap(~paste(sg, scafsg), ncol=1, scales='free_y')  + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
### filter heavier to get only SG==SG
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, position = 'identity', alpha=0.3) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.1, data=ks[ks$genome=='agerjg',][sample(1:sum(ks$genome=='agerjg', na.rm=T), 30000),], aes(x=mya), color='black', fill='black', group='gene') +
geom_histogram(binwidth=0.1, position = 'identity', alpha=0.5) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange'))
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg, fill=sg)) + geom_histogram(binwidth=0.05, data=ks[ks$genome=='agerjg',][sample(1:sum(ks$genome=='agerjg', na.rm=T), 30000),], aes(x=mya), color='black', fill='black', group='gene') +
geom_histogram(binwidth=0.05, position = 'identity', alpha=0.5) + scale_color_manual(values=c('gray', 'red', 'blue', 'orange'))+ scale_fill_manual(values=c('gray', 'red', 'blue', 'orange')) + xlim(0,10)
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg)) + geom_density(data=ks[ks$genome=='agerjg',], aes(x=mya), color=NA, fill='darkgray', group='gene', lwd=3, alpha=0.4) +
geom_density(lwd=3, alpha=0.3) + scale_color_manual(values=c('darkgreen', 'red', 'blue', 'orange'), labels=c('Non-specific', 'Subgenome A', 'Subgenome B', 'Subgenome C'), name='SG-Specific TE')+ scale_fill_manual(values=c('darkgreen', 'red', 'blue', 'orange')) + xlim(0,10) + xlab('Mya')
## cent
ggplot(data[ data$refChr %in% names(muted_colors) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
scale_color_manual(values = muted_colors) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_hline(data=tandems[tandems$width>1e4 & tandems$Classification=='Cent/CentC',], aes(yintercept = start/1e6))
data <- read.table('../syntenic_anchors/anchors/tdacs1-zB73v5-2', header = TRUE)
data <- data[data$gene != 'interanchor', ]
## get queryChrs if they aren't supplied
#  if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
#pasp  refChrs=c(paste0('Chr0', 1:9), 'Chr10')
refChrs=c(paste0('chr',1:10))
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
dplyr::mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
# data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
data$refChr <- factor(data$refChr, levels = paste0('chr', 1:10))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
## get tandem repeat positions
te=import.gff('~/Downloads/Zm-B73-REFERENCE-NAM-5.0.TE.gff3.gz')
tandems=te[te$type %in% c('rDNA_intergenic_spacer_element', 'centromeric_repeat', 'subtelomere', 'knob'),]
tandems=data.frame((tandems+500) %>% group_by(Classification) %>% reduce_ranges())
tandems$refChr=tandems$seqnames
tandems=tandems[tandems$seqnames%in%refChrs,]
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
queryChrs='chr11'
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification)) + geom_hline(yintercept = 107.1)
queryChrs='chr5'
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification)) + geom_hline(yintercept = 26.8)
ggplot(a[a$sg==a$scafsg | a$sg=='non-specific',], aes(x=age*2, group=sg, color=sg)) + geom_density(data=ks[ks$genome=='agerjg',], aes(x=mya), color=NA, fill='darkgray', group='gene', lwd=3, alpha=0.4) +
geom_density(lwd=3, alpha=0.3) + scale_color_manual(values=c('darkgreen', 'red', 'blue', 'orange'), labels=c('Non-specific', 'Subgenome A', 'Subgenome B', 'Subgenome C'), name='SG-Specific TE')+ scale_fill_manual(values=c('darkgreen', 'red', 'blue', 'orange')) + xlim(0,10) + xlab('Mya')
## just single repeat
ggplot(data[ data$refChr %in% names(muted_colors) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
scale_color_manual(values = muted_colors) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_hline(data=tandems[tandems$width>5e3 & tandems$Classification=='rDNA/spacer',], aes(yintercept = start/1e6))
queryChrs=paste0('chr', 1:18)
## just single repeat
ggplot(data[ data$refChr %in% names(muted_colors) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
scale_color_manual(values = muted_colors) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_hline(data=tandems[tandems$width>5e3 & tandems$Classification=='rDNA/spacer',], aes(yintercept = start/1e6))
data <- read.table('../syntenic_anchors/anchors/tdacs1-zB73v5-2', header = TRUE)
data <- data[data$gene != 'interanchor', ]
## get queryChrs if they aren't supplied
#  if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
#pasp  refChrs=c(paste0('Chr0', 1:9), 'Chr10')
refChrs=c(paste0('chr',1:10))
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
dplyr::mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
# data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
data$refChr <- factor(data$refChr, levels = paste0('chr', 1:10))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
## get tandem repeat positions
te=import.gff('~/Downloads/Zm-B73-REFERENCE-NAM-5.0.TE.gff3.gz')
tandems=te[te$type %in% c('rDNA_intergenic_spacer_element', 'centromeric_repeat', 'subtelomere', 'knob'),]
tandems=data.frame((tandems+500) %>% group_by(Classification) %>% reduce_ranges())
tandems$refChr=tandems$seqnames
tandems=tandems[tandems$seqnames%in%refChrs,]
# Create the plot
ggplot(data[  data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6) ) +##/, color = refChr)) +
geom_point() +
facet_grid(queryChr ~ refChr, scales = 'free', space = 'free') +
#   scale_color_manual(values = muted_colors) +
#   theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') + geom_vline(data=tandems[tandems$width>5e3,], aes(xintercept = start/1e6, color=Classification))
