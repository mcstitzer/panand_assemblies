scale_color_manual(values = color_palette) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') +
geom_vline(xintercept=0, color='gray95')+
ggtitle(paste0(ylabelspecies,', ', ploidy)) + xlab('P. vaginatum position (Mb)') +
ylab(paste0(ylabelspecies, ' position (Mb)')) +
ylab('Position (Mb)') +
theme(#strip.text.y = element_text(angle = 0, hjust = 0),
strip.placement.y = "outside" ,
strip.text = element_text(size = 8, color = "darkblue", face = "bold"),
strip.background = element_rect(fill = "lightblue", color = "darkblue", linewidth = 1),
strip.text.y = element_text(angle=0, size=ystriptextsize),
axis.text.x=element_text(size=9),
axis.text.y=element_text(size=5),
panel.spacing = unit(0.1, 'lines'),
plot.title=element_text(color=ploidycolors[ploidy], size=10))+
scale_x_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0)) +  # Automatically choose 3 breaks for x-axis
scale_y_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0))    # Automatically choose 3 breaks for y-axis
#  p + annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
ggdraw(p) +
draw_grob(img) + draw_grob(imgA)
}
av=process_anchors_to_dotplot_FIGURE(filepath = '../syntenic_anchors/anchors/avirgi-Pv-2', minBlock=20, queryChrtoFlip = 'chr9', ylabelspecies = 'A. virginicum', pathtokaryotype = '~/Downloads/avirginicum_karyotype.pdf', pathtoalluvial = '~/Downloads/evoday_alluvial.pdf', ploidy='Diploid')
av
av
process_anchors_to_dotplot_FIGURE <- function(filepath, color_palette=muted_colors, minBlock=10, title='', refChrs=c(paste0('Chr0', 1:9), 'Chr10'), queryChrs='',
queryChrtoFlip='', ylabelspecies='', pathtokaryotype='', pathtoalluvial='', ploidy='') {
# Load data
data <- read.table(filepath, header = TRUE)
data <- data[data$gene != 'interanchor', ]
## get queryChrs if they aren't supplied
if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
}
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
## flip querychr that look funny
if(queryChrtoFlip!=''){
data$revQueryStart[data$queryChr%in%queryChrtoFlip]=abs(data$queryStart - data$maxChr)[data$queryChr%in%queryChrtoFlip]
}
## clean up future facet labels - this is very specific to chr level s
#  data$refLabel=gsub('Chr0', '', data$refChr)
#  data$refLabel=gsub('Chr', '', data$refLabel)
#  data$queryLabel=gsub('chr', '', data$queryLabel)
## set up the image
#  im=data.frame(refChr='Chr01', queryChr=NA, referenceStart=1, revQueryStart=1, path=pathtokaryotype)
#  im$queryChr=names(which.max(table(data$queryChr[data$refChr=='Chr01'])))
pdf_file <- pathtokaryotype
image_raster <- image_read_pdf(pdf_file)
# Convert the image to a rasterGrob
img <- rasterGrob(as.raster(image_raster),
#                   x = 0.9, y = 0.12, width = 0.25, height = 0.25, just = c("right", "bottom"))
x = 0.90, y = 0.15, width = 0.25, height = 0.25, just = c("right", "bottom"))
# Create a black border (rectangular grob)
#  border <- rectGrob(gp = gpar(col = "black", fill = NA, lwd = 2))  # lwd sets the thickness of the border
# Combine the image and the border into a single grob
#  img <- grobTree(border, img)
## do same for alluvial plot
pdf_fileA <- pathtoalluvial
image_rasterA <- image_read_pdf(pdf_fileA)
# Convert the image to a rasterGrob
imgA <- rasterGrob(as.raster(image_rasterA),
x = 0.1, y = 0.88, width = 0.35, height = 0.15, just = c("left", "top"))
# Combine the image and the border into a single grob
#  imgA <- grobTree(border, imgA)
ystriptextsize=ifelse(length(unique(queryChrs))>50, 6,9)
# Create the plot
p=ggplot(data[ data$refChr %in% names(color_palette) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr)) +
geom_point(size=0.5) +
facet_grid(queryChr ~ refChr, scales = 'free', space='free') +
scale_color_manual(values = color_palette) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') +
geom_vline(xintercept=0, color='gray95')+
ggtitle(paste0(ylabelspecies,', ', ploidy)) + xlab('P. vaginatum position (Mb)') +
ylab(paste0(ylabelspecies, ' position (Mb)')) +
#  ylab('Position (Mb)') +
theme(#strip.text.y = element_text(angle = 0, hjust = 0),
strip.placement.y = "outside" ,
strip.text = element_text(size = 8, color = "darkblue", face = "bold"),
strip.background = element_rect(fill = "lightblue", color = "darkblue", linewidth = 1),
strip.text.y = element_text(angle=0, size=ystriptextsize),
axis.text.x=element_text(size=9),
axis.text.y=element_text(size=5),
panel.spacing = unit(0.1, 'lines'),
plot.title=element_text(color=ploidycolors[ploidy], size=10))+
scale_x_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0)) +  # Automatically choose 3 breaks for x-axis
scale_y_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0))    # Automatically choose 3 breaks for y-axis
#  p + annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
ggdraw(p) +
draw_grob(img) + draw_grob(imgA)
}
av=process_anchors_to_dotplot_FIGURE(filepath = '../syntenic_anchors/anchors/avirgi-Pv-2', minBlock=20, queryChrtoFlip = 'chr9', ylabelspecies = 'A. virginicum', pathtokaryotype = '~/Downloads/avirginicum_karyotype.pdf', pathtoalluvial = '~/Downloads/evoday_alluvial.pdf', ploidy='Diploid')
av
process_anchors_to_dotplot_FIGURE(filepath = '../syntenic_anchors/anchors/snutan-Pv-4', minBlock=50, ylabelspecies = 'S. nutans', pathtokaryotype = '~/Downloads/snutans_karyotype.pdf', pathtoalluvial = '~/Downloads/blagur_alluvial.pdf', ploidy='Tetraploid')
process_anchors_to_dotplot_FIGURE(filepath = '../syntenic_anchors/anchors/hconto-Pv-4', minBlock=50, ylabelspecies = 'H. contortus', pathtokaryotype = '~/Downloads/hcontortus_karyotype.pdf', pathtoalluvial = '~/Downloads/blagur_alluvial.pdf', ploidy='Tetraploid')
bl=process_anchors_to_dotplot_FIGURE(filepath = '../syntenic_anchors/anchors/blagur-Pv-6', minBlock=20, ylabelspecies = 'B. laguroides', pathtokaryotype = '~/Downloads/blaguroides_karyotype.pdf', pathtoalluvial = '~/Downloads/blagur_alluvial.pdf', ploidy='Hexaploid')
bl
td=process_anchors_to_dotplot_Tripsacinae(filepath = '../syntenic_anchors/anchors/tdacs1-Pv-2', minBlock=20, ylabelspecies = 'T. dactyloides FL')
td
process_anchors_to_dotplot_Tripsacinae <- function(filepath, color_palette=muted_colors, minBlock=10, title='', refChrs=c(paste0('Chr0', 1:9), 'Chr10'), queryChrs='',
queryChrtoFlip='', ylabelspecies='', pathtokaryotype='', pathtoalluvial='', ploidy='Paleotetraploid', origChrOrientation=F) {
# Load data
data <- read.table(filepath, header = TRUE)
data <- data[data$gene != 'interanchor', ]
## get queryChrs if they aren't supplied
if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
}
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
## flip querychr that look funny
if(queryChrtoFlip!=''){
data$revQueryStart[data$queryChr%in%queryChrtoFlip]=abs(data$queryStart - data$maxChr)[data$queryChr%in%queryChrtoFlip]
}
# Create the plot
if(origChrOrientation){
p=ggplot(data[ data$refChr %in% names(color_palette) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = queryStart / 1e6, color = refChr))
}else{
p= ggplot(data[ data$refChr %in% names(color_palette) & data$refChr%in%refChrs & data$queryChr%in%queryChrs, ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color = refChr))
}
p= p+
geom_point(size=0.5) +
facet_grid(queryChr ~ refChr, scales = 'free', space='free') +
scale_color_manual(values = color_palette) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') +
geom_vline(xintercept=0, color='gray95')+
ggtitle(paste0(ylabelspecies,', ', ploidy)) + xlab('P. vaginatum position (Mb)') +
ylab(paste0(ylabelspecies, ' position (Mb)')) +
#   ylab('Position (Mb)') +
theme(#strip.text.y = element_text(angle = 0, hjust = 0),
strip.placement.y = "outside" ,
strip.text = element_text(size = 8, color = "darkblue", face = "bold"),
strip.text.y=element_text(angle=0),
strip.background = element_rect(fill = "lightblue", color = "darkblue", linewidth = 1),
#      strip.text.y = element_blank(),
axis.text.x=element_text(size=9),
axis.text.y=element_text(size=5),
panel.spacing = unit(0.1, 'lines'),
plot.title=element_text(color=ploidycolors[ploidy], size=10))+
scale_x_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0)) +  # Automatically choose 3 breaks for x-axis
scale_y_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0))    # Automatically choose 3 breaks for y-axis
#  strip.background = element_rect(fill = "lightblue", color = "darkblue", size = 1),
#  strip.text = element_text(color = "white", face = "bold"),
#  panel.spacing = unit(1, "lines")
#  p + annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
p
}
process_anchors_to_dotplot_ZeaTrip <- function(filepath,
paspalum_tripsacum,
paspalum_maize,
color_palette=muted_colors, minBlock=10, title='', refChrs=c(paste0('Chr0', 1:9), 'Chr10'), queryChrs='',
queryChrtoFlip='', ylabelspecies='', pathtokaryotype='', pathtoalluvial='', ploidy='Paleotetraploid', origChrOrientation=F) {
# Load data
data <- read.table(filepath, header = TRUE)
data <- data[data$gene != 'interanchor', ]
pasptrip=read.table(paspalum_tripsacum, header=T)
pasptrip=pasptrip[pasptrip$gene!='interanchor',]
paspzea=read.table(paspalum_maize, header=T)
paspzea=paspzea[paspzea$gene!='interanchor',]
dataGRtrip=GRanges(seqnames=data$queryChr, IRanges(start=data$queryStart, end=data$queryEnd))
dataGRzea=GRanges(seqnames=data$refChr, IRanges(start=data$referenceStart, end=data$referenceEnd))
pasptripGR=GRanges(seqnames=pasptrip$queryChr, IRanges(start=pasptrip$queryStart, end=pasptrip$queryEnd))
pasptripGR$paspChr=pasptrip$refChr
paspzeaGR=GRanges(seqnames=paspzea$queryChr, IRanges(start=paspzea$queryStart, end=paspzea$queryEnd))
paspzeaGR$paspChr=paspzea$refChr
overlaps <- findOverlaps(dataGRtrip, pasptripGR)
# Step 2: Create a vector for paspChr with NA values as default
paspChr <- rep(NA, length(dataGRtrip))
# Step 3: Assign paspChr values based on the overlaps
paspChr[queryHits(overlaps)] <- pasptripGR$paspChr[subjectHits(overlaps)]
# Step 4: Add the paspChr column to dataGRtrip
dataGRtrip$paspChr <- paspChr
data$tripPaspChr=paspChr
##zea
overlaps <- findOverlaps(dataGRzea, paspzeaGR)
# Step 2: Create a vector for paspChr with NA values as default
paspChr <- rep(NA, length(dataGRzea))
# Step 3: Assign paspChr values based on the overlaps
paspChr[queryHits(overlaps)] <- paspzeaGR$paspChr[subjectHits(overlaps)]
# Step 4: Add the paspChr column to dataGRtrip
dataGRzea$paspChr <- paspChr
data$zeaPaspChr=paspChr
data=data %>% group_by(blockIndex) %>%  mutate(commonTripPasp = as.character(names(which.max(table(tripPaspChr, useNA="always")))[1]),
commonZeaPasp = as.character(names(which.max(table(zeaPaspChr, useNA="always")))[1]))
data=data %>%
mutate(commonPaspChr = case_when(
is.na(commonTripPasp) ~ commonZeaPasp,             # If col1 is NA, use col2
is.na(commonZeaPasp) ~ commonTripPasp,             # If col2 is NA, use col1
commonTripPasp == commonZeaPasp ~ commonTripPasp,            # If both are the same, use that value
commonTripPasp != commonZeaPasp  ~ NA_character_                  # If they are different, use NA
))
## get queryChrs if they aren't supplied
if(queryChrs[1]==''){
queryChrs=unique(data$queryChr)
}
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
mutate(blockLength = dplyr::n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
data$refChr <- factor(data$refChr, levels = paste0('chr', 1:10))
# Reverse strand calculations
data <- data %>%
arrange(freqRef, referenceStart, queryStart)
data$queryChr <- factor(data$queryChr, levels = rev(data$queryChr[!duplicated(data$queryChr)]))
data$revQueryStart <- data$queryStart
data$revQueryStart[data$freqStrand == '-'] <- abs(data$queryStart - data$maxChr)[data$freqStrand == '-']
## flip querychr that look funny
if(queryChrtoFlip!=''){
data$revQueryStart[data$queryChr%in%queryChrtoFlip]=abs(data$queryStart - data$maxChr)[data$queryChr%in%queryChrtoFlip]
}
##### NEVERMIND! The repeats i care about aren't in b73, since the chromosome collisions occurred sooo sooo long ago
#   ## get repeats to plot knobs and centromeres
#   teb73=import.gff('~/Downloads/Zm-B73-REFERENCE-NAM-5.0.TE.gff3.gz')
#   teb73=teb73[teb73$Classification%in% c('Cent/CentC', 'knob/knob180', 'knob/TR-1', 'rDNA/spacer'),]
#   teb73_split <- split(teb73, teb73$Classification)
#   merged_teb73 <- GRanges()
#
#   # Loop over each split GRanges object, reduce and concatenate manually
#   for(i in 1:4){
#     reduced_gr <- GenomicRanges::reduce(teb73_split[[i]], min.gapwidth = 10000, ignore.strand=T)
#     reduced_gr$Classification=teb73_split[[i]]$Classification[1]
#     merged_teb73 <- c(merged_teb73, reduced_gr)
#   }
#
# merged_teb73$refChr=seqnames(merged_teb73)
# merged_teb73$referenceStart=start(merged_teb73)
# merged_teb73$referenceEnd=end(merged_teb73)
# merged_teb73=merged_teb73[seqnames(merged_teb73)%in%paste0('chr',1:10),]
#
# Create the plot
if(origChrOrientation){
p=ggplot(data[ data$refChr%in%refChrs & data$queryChr%in%queryChrs,],# & data$pasptrip==data$paspzea & !is.na(data$pasptrip), ],
aes(x = referenceStart / 1e6, y = queryStart / 1e6, color=commonPaspChr))
}else{
p= ggplot(data[ data$refChr%in%refChrs & data$queryChr%in%queryChrs,],# & data$pasptrip==data$paspzea & !is.na(data$pasptrip), ],
aes(x = referenceStart / 1e6, y = revQueryStart / 1e6, color=commonPaspChr))
}
p= p+
geom_point(size=0.5) +
facet_grid(queryChr ~ refChr, scales = 'free', space='free') +
scale_color_manual(values = color_palette) +
theme(legend.position = 'none') +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
geom_hline(aes(yintercept=maxChr/1e6), lty='dashed', color='gray') +
geom_vline(xintercept=0, color='gray95')+
#    geom_rect(data=data.frame(merged_teb73), aes(xmin = start/1e6, xmax = end/1e6, y=-Inf, ymin = -Inf, ymax = Inf, fill = Classification), alpha = 0.9, color=NA)+
#   scale_fill_manual(values=c("Cent/CentC" = "#ff5733", "knob/knob180" = "#33ff57", "knob/TR-1" = "#3357ff", "rDNA/spacer" = "#ff33a8")) +
#   ggtitle(paste0(ylabelspecies,', ', ploidy)) +
xlab('Z. m. ssp. mays B73 position (Mb)') +
ylab(paste0(ylabelspecies, ' position (Mb)')) +
#   ylab('Position (Mb)') +
theme(strip.text.y = element_text(angle = 0, hjust = 0),
strip.placement.y = "outside" ,
strip.text = element_text(size = 8, color = "darkblue", face = "bold"),
strip.background = element_rect(fill = "lightblue", color = "darkblue", linewidth = 1),
axis.text.x=element_text(size=9),
axis.text.y=element_text(size=5),
panel.spacing = unit(0.1, 'lines'),
plot.title=element_text(color=ploidycolors[ploidy], size=10))+
scale_x_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0)) +  # Automatically choose 3 breaks for x-axis
scale_y_continuous(breaks = scales::breaks_pretty(n = 2), expand=c(0,0))    # Automatically choose 3 breaks for y-axis
#  p + annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
p
}
zm=process_anchors_to_dotplot_Tripsacinae(filepath = '../syntenic_anchors/anchors/zmB735-Pv-4', minBlock=20, ylabelspecies='Z. mays subsp. mays B73')
zm
tz=plot_grid(td, zm, ncol=2, align='hv', labels=c('C', 'D'))
tzdp=process_anchors_to_dotplot_ZeaTrip('anchors/tdacs1-zB73v5-2', paspalum_tripsacum = 'anchors/tdacs1-Pv-2', paspalum_maize = 'anchors/zmB735-Pv-4', color_palette=muted_colors, minBlock=10, refChrs = paste0('chr',1:10), queryChrs=paste0('chr',1:18), ylabelspecies='T. dactyloides KS ')
tzdp+ ylab('T. dactyloides KS position (Mb)')
tzdp
#plot_grid(
plot_grid(plot_grid(av, tz,
plot_grid(tzdp + ylab('T. dactyloides KS position (Mb)'), fig_chrrearr + theme(legend.position='bottom'), labels=c('E','F'), align='v'),  labels=c('A', '',''), align='v', ncol=1, rel_heights = c(1,1,1)),
bl, ncol=2, labels=c('', 'B'), align='h')#,
library(data.table)
library(ggrepel)
asize=fread('../general_summaries/panand_assembly_sizes.txt', header=T, quote="", fill=T)
asize$ploidy=factor(asize$ploidy, levels=c('Diploid', 'Tetraploid', 'Paleotetraploid', 'Hexaploid'))
## count rearrangments
diploids=c('cserru', 'irugos', 'sbicol', 'ppanic', 'ttrian', 'crefra', 'avirgi', 'smicro', 'rtuber')
tetraploids=c('snutan', 'hconto', 'ccitra', 'achine', 'sscopa', 'etrips',  'vcuspi')
hexaploids=c('udigit', 'agerar', 'hcompr', 'blagur')
countRearrangements <- function(filepath, color_palette=muted_colors, minBlock=20) {
# Load data
data <- read.table(filepath, header = TRUE)
data <- data[data$gene != 'interanchor', ]
# Reduce to blocks and calculate stats
data <- data %>%
group_by(blockIndex) %>%
mutate(blockLength = n()) %>%
group_by(queryChr) %>%
mutate(freqStrand = names(which.max(table(strand))),
maxChr = max(queryStart),
freqRef = names(which.max(table(refChr))))
# Filter data based on block length
data <- data[data$blockLength > minBlock, ]
data$refChr <- factor(data$refChr, levels = c(paste0('Chr0', 1:9), 'Chr10'))
temp=data %>% filter(blockLength>minBlock) %>% group_by(queryChr)%>% summarize(n=length(unique(refChr)))
sum(temp$n>1)
}
for(i in diploids){
print(countRearrangements(Sys.glob(paste0('../syntenic_anchors/anchors/', i, '-Pv-*'))))
}
for(i in tetraploids){
print(countRearrangements(Sys.glob(paste0('../syntenic_anchors/anchors//', i, '-Pv-*'))))
}
for(i in hexaploids){
print(countRearrangements(Sys.glob(paste0('../syntenic_anchors/anchors/', i, '-Pv-*')), minBlock=50))
}
for(i in c('zmB735')){
print(countRearrangements(Sys.glob(paste0('../syntenic_anchors/anchors/', i, '-Pv-*')), minBlock=50))
}
lowQualAssemblies=c('telega', 'atenui', 'rrottb')
asize$transloc=sapply(asize$V2, function(x) countRearrangements(Sys.glob(paste0('../syntenic_anchors/anchors/', x, '-Pv-*')), minBlock=30))
asize$transloc=ifelse(asize$haploid, asize$transloc, asize$transloc/2) ## if haploid, this is true number, if allelic, don't count each allele
asize %>% group_by(ploidy) %>% summarize(translocMean=mean(transloc, na.rm=T), scaledTranslocMean=mean(scaledTransloc, na.rm=T))
## numbers for paper
asize %>% filter(!V2 %in% lowQualAssemblies) %>% group_by(ploidy) %>% summarize(meanrearr=mean(transloc, na.rm=T), meanscaled=mean(scaledTransloc, na.rm=T))
ggplot(asize[!asize$V2%in%lowQualAssemblies,], aes(x=ploidy, y=scaledTransloc, group=ploidy, color=ploidy)) + geom_boxplot(outlier.shape=NA) +geom_point(position = position_jitter(seed = 1),  size=2, aes(shape=haploid))+ geom_text(aes(label=V2), position = position_jitter(seed = 1)) + scale_color_manual(values=ploidycolors) + theme(legend.position='none')+ ggpubr::stat_compare_means(aes(group=ploidy, x=ploidy), label = 'p.signif', show.legend = F,ref.group = "Diploid", label.y=6) + ylab('Translocations per haploid equivalent') + xlab('Ploidy')
ggplot(asize, aes(x=ploidy, y=scaledTransloc, group=ploidy, color=ploidy)) + geom_boxplot(outlier.shape=NA) +geom_point(position = position_jitter(seed = 1),  size=2, aes(shape=haploid))+ geom_text(aes(label=V2), position = position_jitter(seed = 1)) + scale_color_manual(values=ploidycolors) + theme(legend.position='none')+ ggpubr::stat_compare_means(aes(group=ploidy, x=ploidy), label = 'p.signif', show.legend = F,ref.group = "Diploid", label.y=6) + ylab('Translocations per haploid equivalent') + xlab('Ploidy')
## no clear relatioonship with parental age?? fair if it's all cytotype age...
ggplot(asize[!asize$V2%in%lowQualAssemblies,], aes(x=mya, y=scaledTransloc, color=ploidy)) + geom_point() + scale_color_manual(values=ploidycolors)
## translocations are related to chromosome count, reassuringly!!!
chrCount=read.table('../general_summaries/panand_chr_counts.txt', header=T)
asize$chrCount=chrCount$haploidchr[match(asize$V2, chrCount$sixlettercode)]
ggplot(asize[!asize$V2%in%lowQualAssemblies,], aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_jitter() + scale_color_manual(values=ploidycolors) + xlab('Haploid Chromosome Number') + ylab('Translocations per haploid equivalent')
ggplot(asize, aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_jitter() + scale_color_manual(values=ploidycolors)+ xlab('Haploid Chromosome Number') + ylab('Translocations per haploid equivalent')
ggplot(asize, aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_jitter() + geom_text(aes(label=V2)) + scale_color_manual(values=ploidycolors)+ xlab('Haploid Chromosome Number') + ylab('Translocations per haploid equivalent')
ggplot(asize, aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_vline(xintercept=c(9,11:19,21:29), color='gray90', lty='dotted', alpha=0.3) + geom_vline(xintercept=c(10,20,30), color='gray80', lty='dashed', alpha=0.3)+ geom_jitter(size=4, width = 0.1, alpha=1) + scale_color_manual(values=ploidycolors)+ xlab('Haploid Chromosome Number') + ylab('Rearrangements per Diploid Equivalent')
summary(lm(data=asize, scaledTransloc~chrCount))
## with regression line
fig_chrrearr=ggplot(asize, aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_vline(xintercept=c(9,11:19,21:29), color='gray90', lty='dotted', alpha=0.3) + geom_vline(xintercept=c(10,20,30), color='gray80', lty='dashed', alpha=0.3)+ geom_point(size=4, position=position_jitter(seed=9,width = 0.1), alpha=0.8, pch=1, stroke=3) + scale_color_manual(values=ploidycolors)+ xlab('Haploid Chromosome Number') + ylab('Rearrangements per\nDiploid Equivalent') + stat_smooth(method='lm', aes(group=NA), se=F, color='gray80')
fig_chrrearr
## with regression line
fig_chrrearr=ggplot(asize, aes(x=chrCount, y=scaledTransloc, color=ploidy)) + geom_vline(xintercept=c(9,11:19,21:29), color='gray90', lty='dotted', alpha=0.3) + geom_vline(xintercept=c(10,20,30), color='gray80', lty='dashed', alpha=0.3)+ geom_point(size=4, position=position_jitter(seed=9,width = 0.1), alpha=0.8, pch=1, stroke=3) + scale_color_manual(values=ploidycolors)+ xlab('Haploid Chromosome Number') + ylab('Rearrangements per\nDiploid Equivalent') + stat_smooth(method='lm', aes(group=NA), se=F, color='gray80')
fig_chrrearr
asize$scaledTransloc=ifelse(asize$ploidy%in%c('Paleotetraploid', 'Tetraploid'), asize$transloc/2, ifelse(asize$ploidy=='Hexaploid', asize$transloc/3, asize$transloc))
library(data.table)
library(dplyr)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
library(stringr)
synt=read.table('~/Downloads/sharedSyntenicAnchors.txt', header=F)
b=read.table('../syntenic_anchors/gene_anchorTable_AnchorWave_Paspalum.txt', header=T)
b=b[,-which(colnames(b)%in%c('svirid',"pprate", "osativ", "eophiu", "bdista", "agerjg", 'tdactm', 'tzopol'))]
b=b[,-which(colnames(b)%in%c('tdacs2', 'tdacn2'))]
table(rowSums(b[,-1]>0))
bb=b[rowSums(b[,-1]>0)>=32,]
sum(synt$V1==str_split_fixed(bb$gene, '\\.',2)[,1])
## now get positions in the genome for thsese
all=read.table('../panand_sp_ploidy.txt')
all$V3[all$V2=='rtuber']=2
all$V3[all$V2=='telega']=2
anchors=lapply(all$V2, function(x) {
a=read.table(paste0('anchors/',x, '-Pv-', 2*all$V3[all$V2==x]), header=T)
a$genome=x
return(a)
})
ab=Reduce(function(...) merge(..., all=T), anchors)
head(het)
head(b)
###
### okay so b is now positions in each queyr genome
bs=b[b$gene%in%bb$gene,]
asize=fread('../general_summaries/panand_assembly_sizes.txt', header=T, quote="", fill=T)
asize$syntAnchors=colSums(bb[,-1])[match(asize$V2, names(colSums(bb[,-1])))]
asize$syntAnchorsCount=colSums(bb[,-1]>0)[match(asize$V2, names(colSums(bb[,-1]>0)))]
asize$syntAnchors=ifelse(asize$haploid, asize$syntAnchors, asize$syntAnchors/2)
asize$ploidy=factor(asize$ploidy, levels=c('Diploid', 'Tetraploid', 'Paleotetraploid', 'Hexaploid'))
asize$diploidEquivalent=ifelse(asize$ploidy=='Diploid', asize$syntAnchors, ifelse(asize$ploidy%in%c('Tetraploid', 'Paleotetraploid'), asize$syntAnchors/2, ifelse(asize$ploidy=='Hexaploid', asize$syntAnchors/3, NA)))
ks=fread('ks_self/blagur_matches.txt')
ks$gene=str_split_fixed(ks$V3, '_',3)[,2]
kss=ks[ks$gene%in%synt$V1,]
kss$queryChr=str_split_fixed(kss$V3, '_', 3)[,3]
kss$queryChr[substr(kss$queryChr,1,1)%in%c('a', 's')]=str_extract(kss$V3, "(scaf_[0-9]+|alt-scaf_[0-9]+)")[substr(kss$queryChr,1,1)%in%c('a', 's')]
kss$queryChr[substr(kss$queryChr,1,3)%in%c('ctg')]=str_extract(kss$V3, "(ctg_[0-9]+)")[substr(kss$queryChr,1,3)%in%c('ctg')]
kss$queryStart <- as.integer(str_match(kss$V3, "_(\\d+)-(\\d+)$")[, 2])
kss$queryEnd <- as.integer(str_match(kss$V3, "_(\\d+)-(\\d+)$")[, 3])
#outFiltered$dnds=ks$V19[match(paste(outFiltered$genome, outFiltered$first_gene), paste(ks$genome, ks$gene))]
kss$refGenome=substr(kss$V4,1,6)
kss$refChr=str_split_fixed(kss$V4, '_', 3)[,3]
kss$refChr[substr(kss$refChr,1,1)%in%c('a', 's')]=str_extract(kss$V4, "(scaf_[0-9]+|alt-scaf_[0-9]+)")[substr(kss$queryChr,1,1)%in%c('a', 's')]
kss$refChr[substr(kss$refChr,1,3)%in%c('ctg')]=str_extract(kss$V4, "(ctg_[0-9]+)")[substr(kss$queryChr,1,3)%in%c('ctg')]
kss$refStart <- as.integer(str_match(kss$V4, "_(\\d+)-(\\d+)$")[, 2])
kss$refEnd <- as.integer(str_match(kss$V4, "_(\\d+)-(\\d+)$")[, 3])
kss$paspChr=substr(kss$gene,6,7)
#### now do for each
merged_results <- list()
# Loop through each file, process it, and append it to the merged_results list
for (file in all$V2) {
# Read in the ks file
ks <- fread(paste0('ks_self/', file, '_matches.txt'))
# Extract gene information
ks$gene <- str_split_fixed(ks$V3, '_', 3)[, 2]
# Filter based on 'synt' gene list
kss <- ks[ks$gene %in% synt$V1, ]
# Process queryChr
kss$queryChr <- str_split_fixed(kss$V3, '_', 4)[, 3]
kss$queryChr[substr(kss$queryChr, 1, 1) %in% c('a', 's')] <- str_extract(kss$V3, "(scaf_[0-9]+|alt-scaf_[0-9]+)")[substr(kss$queryChr, 1, 1) %in% c('a', 's')]
kss$queryChr[substr(kss$queryChr, 1, 3) %in% c('ctg')] <- str_extract(kss$V3, "(ctg_[0-9]+)")[substr(kss$queryChr, 1, 3) %in% c('ctg')]
# Extract queryStart and queryEnd
kss$queryStart <- as.integer(str_match(kss$V3, "_(\\d+)-(\\d+)$")[, 2])
kss$queryEnd <- as.integer(str_match(kss$V3, "_(\\d+)-(\\d+)$")[, 3])
# Process reference information
kss$refGenome <- substr(kss$V4, 1, 6)
kss$refChr <- str_split_fixed(kss$V4, '_', 4)[, 3]
kss$refChr[substr(kss$refChr, 1, 1) %in% c('a', 's')] <- str_extract(kss$V4, "(scaf_[0-9]+|alt-scaf_[0-9]+)")[substr(kss$refChr, 1, 1) %in% c('a', 's')]
kss$refChr[substr(kss$refChr, 1, 3) %in% c('ctg')] <- str_extract(kss$V4, "(ctg_[0-9]+)")[substr(kss$refChr, 1, 3) %in% c('ctg')]
# Extract refStart and refEnd
kss$refStart <- as.integer(str_match(kss$V4, "_(\\d+)-(\\d+)$")[, 2])
kss$refEnd <- as.integer(str_match(kss$V4, "_(\\d+)-(\\d+)$")[, 3])
# Add paspChr column
kss$paspChr <- substr(kss$gene, 6, 7)
# Add a column for the genome from the file name (assuming 'blagur' is part of the file name)
kss$genome <- file
# Append the result to the merged_results list
merged_results[[file]] <- kss
}
# Combine all processed data frames into one
final_merged_data <- rbindlist(merged_results)
final_merged_data$ploidy=asize$ploidy[match(final_merged_data$genome, asize$V2)]
final_merged_data$speciesLabel=asize$speciesLabel[match(final_merged_data$genome, asize$V2)]
final_merged_data %>% group_by(queryChr, refChr, paspChr, genome) %>%summarize(ks=median(V17), n=n()) %>% filter(n>10) %>% ggplot() + geom_histogram(aes(x=ks), binwidth=0.001) + facet_wrap(~paspChr, ncol=1)
mu=6.5e-9
mks$mya=mks$medianNonAllelicCorr/2/mu/1e6
ks$mya=ks$ks/2/mu/1e6
ggplot(data.frame(ks)[ks$ploidy %in% c('Tetraploid', 'Paleotetraploid', 'Hexaploid') & !ks$genome%in%c('zdmomo', 'zdgigi', 'zdnica'),], aes(x=mya, color=ploidy, group=genome)) + geom_density() + scale_color_manual(values=ploidycolors) + facet_wrap(~ploidy, ncol=1, scales='free_y') + geom_vline(data=mks[!mks$genome %in% c('zdmomo', 'zdgigi', 'zdnica'),], aes(xintercept=mya))
asize$medianKs=mks$medianNonAllelicCorr[match(asize$V2, mks$genome)]
asize$mya=mks$mya[match(asize$V2, mks$genome)]
asize$mya[asize$ploidy=='Diploid']=0
asize$medianKs[asize$ploidy=='Diploid']=0
tppp=reshape2::melt(bb, id.vars=c('genome', 'Count'))
tppp$genome=factor(tppp$genome, levels=names(taxonnames))
tppp$ploidy=gs$ploidy[match(tppp$genome, gs$V2)]
tppp$phyleticcol=paste0(tppp$ploidy, tppp$variable)
## make singletons "monophyletic"
tppp$phyleticcol[tppp$Count==1]=paste0(tppp$ploidy[tppp$Count==1], 'Monophyletic')
tppp$species=taxonnames[match(tppp$genome, names(taxonnames))]
tppp$species=factor(tppp$species, levels=taxonnames)
tppp=tppp[!is.na(tppp$genome),]
## copy bar plots, no label
cpb=ggplot(tppp[tppp$doubledCount%in% 1:6 & !is.na(tppp$species),], aes(x=doubledCount, y=value, group=ploidy, fill=ploidy)) + geom_hline(yintercept=0, color='snow2', linetype='dotted') + geom_vline(xintercept=c(1,3,5), color='snow2', linetype='dotted') + geom_vline(xintercept=c(2,4,6), color='snow3', linetype='dotted') + geom_histogram(stat='identity', position='stack') +
facet_wrap(~speciesLabel, ncol=1, strip.position='left', drop=F) + scale_fill_manual(values=ploidycolors) +   theme( strip.background = element_blank(), strip.text.y.left = element_blank(), panel.spacing = unit(3, "pt"), axis.text.y=element_blank(), axis.text.x=element_text(size=9))+ theme(legend.position = "none", plot.margin = margin(l = -15)) + ylab('')+ xlab('Syntenic Gene\nCopy Number')+ scale_y_continuous(n.breaks = 3)
## auto/allo pies, no label
aap=tppp %>% group_by(speciesLabel, variable) %>% summarize(n=n(), count=sum(value)) %>% filter(variable!='NotApplicable') %>% mutate(pct = count/sum(count)*100, width=sum(count))%>%
ggplot(aes(x=width/2, y=pct, fill=variable, width=width)) + geom_bar(stat='identity', position='fill') + coord_polar(theta='y') + facet_wrap(~speciesLabel, ncol=1, strip.position='left')+   theme( strip.background = element_blank(), strip.text.y.left = element_blank(), panel.spacing = unit(3, "pt"), axis.text=element_text(size=9))+ theme(legend.position = "none") + theme(axis.ticks=element_blank(), axis.text=element_blank(), panel.grid=element_blank(), panel.border=element_blank()) + scale_fill_manual(values=c('#5F4B8BFF', '#E69A8DFF')) + ylab('Proportion\nDuplicates\nMonophyletic') + xlab('')
## ks distributions, no label
#ksp=ggplot(ks[!is.na(ks$speciesLabel) ,], aes(x=V17,  color=ploidy, fill=ploidy))  + geom_vline(xintercept=c(0.05,0.15,0.25), color='snow2', linetype='dotted') + geom_vline(xintercept=c(0.1,0.2,0.3), color='snow3', linetype='dotted')+ geom_density() + scale_color_manual(values=ploidycolors) + scale_fill_manual(values=ploidycolors) +  facet_wrap(~speciesLabel, ncol=1, strip.position='left', scales='free_y', drop=F) + theme( strip.background = element_blank(), strip.text.y.left = element_blank(), panel.spacing = unit(3, "pt"), axis.text=element_text(size=9))+ theme(legend.position = "none") + ylab('')+ xlab('Ks Between\nDuplicates') + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) + geom_vline(aes(xintercept=median), color='snow2', alpha=0.6)
## wait add mohamed's idea of histograms!
ksp=ggplot(ks[!is.na(ks$speciesLabel) & ks$V17>=0.001 & !is.na(ks$V17),], aes(x=V17,  color=ploidy, fill=ploidy))  + geom_vline(xintercept=c(0.05,0.15,0.25), color='snow2', linetype='dotted') + geom_vline(xintercept=c(0.1,0.2,0.3), color='snow3', linetype='dotted')+ geom_histogram(aes(y = after_stat(density)), binwidth=0.005, alpha=0.7, color=NA) + geom_density(alpha=1, fill=NA) + scale_color_manual(values=ploidycolors) + scale_fill_manual(values=ploidycolors) +  facet_wrap(~speciesLabel, ncol=1, strip.position='left', scales='free_y', drop=F) + theme( strip.background = element_blank(), strip.text.y.left = element_blank(), panel.spacing = unit(3, "pt"), axis.text=element_text(size=9))+ theme(legend.position = "none") + ylab('')+ xlab('Ks Between\nDuplicates') + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) + geom_vline(aes(xintercept=median), color='dimgray', alpha=0.5) # + geom_vline(aes(xintercept=mtm1), color='dimgray', alpha=0.5)
homeol=final_merged_data %>% filter(!is.na(shortspeciesLabel)) %>% group_by(queryChr, refChr, paspChr, genome,ploidy, speciesLabel, shortspeciesLabel) %>%mutate(ks=mean(V17), n=length(unique(gene))) %>% filter(n>10)   %>% group_by(genome, shortspeciesLabel, ploidy) %>% summarize(n=n(), ks=mean(V17, na.rm=T))
shorttaxonnames=c("Z. mays ssp. parviglumis TIL11", "Z. mays ssp. mays B73v5", "Z. mays ssp. parviglumis TIL01", "Z. mays ssp. mexicana TIL25", "Z. mays ssp. mexicana TIL18", "Z. mays ssp. huehuetengensis",
"Z. luxurians", "Z. nicaraguensis", "Z. diploperennis Momo", "Z. diploperennis Gigi", "T. zoloptense", "T. dactyloides FL", "T. dactyloides Southern Hap2",
"T. dactyloides Northern Hap2", "T. dactyloides KS", "T. dactyloides tetraploid", "U. digitatum", "V. cuspidata", "R. rottboellioides", "R. tuberculosa",
"H. compressa", "E. tripsacoides", "S. scoparium", "S. microstachyum", "A. virginicum", "A. chinensis", "A. gerardi",
"C. refractus", "C. citratus", "H. contortus", "T. triandra", "B. laguroides", "P. paniceum", "S. bicolor",
"I. rugosum", "S. nutans", '"A." burmanicus', "T. elegans", "C. serrulatus", "P. vaginatum")
names(shorttaxonnames)=c("zTIL11", "zmB735", "zTIL01", "zTIL25", "zTIL18", "zmhuet",
"zluxur", "znicar", "zdmomo", "zdgigi", "tzopol", "tdacs1", "tdacs2",
"tdacn2", "tdacn1", "tdactm", "udigit", "vcuspi", "rrottb", "rtuber",
"hcompr", "etrips", "sscopa", "smicro", "avirgi", "achine", "agerar",
"crefra", "ccitra", "hconto", "ttrian", "blagur", "ppanic", "sbicol",
"irugos", "snutan", "atenui", "telega", "cserru", "pvagin")
## from ks_plotting
final_merged_data$shortspeciesLabel=ifelse(final_merged_data$genome%in%asize$V2[asize$haploid], paste0(shorttaxonnames[match(final_merged_data$genome, names(shorttaxonnames))], '*'), shorttaxonnames[match(final_merged_data$genome, names(shorttaxonnames))])
final_merged_data$shortspeciesLabel=factor(final_merged_data$shortspeciesLabel, levels=levels(tppp$speciesLabel))
final_merged_data$shortspeciesLabel[final_merged_data$genome=='zmhuet']=levels(tppp$speciesLabel)[6]
